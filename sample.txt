const jwt = require('jsonwebtoken');

// Middleware to authenticate token and set user in req object
const authenticateToken = (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (token == null) {
        return res.sendStatus(401); // Unauthorized
    }

    jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
        if (err) {
            console.error('JWT verification error:', err);
            return res.sendStatus(403); // Forbidden
        }
        
        req.user = user; // Attach user information to the request object
        next(); // Proceed to the next middleware or route handler
    });
};

// Middleware to check if the user is an admin
const authenticateAdmin = (req, res, next) => {
    authenticateToken(req, res, () => {
        if (req.user && req.user.role === 'admin') {
            next(); // Proceed if the user is an admin
        } else {
            res.sendStatus(403); // Forbidden if not an admin
        }
    });
};

// Middleware to check if the user is authenticated (basic user access)
const authenticateUser = (req, res, next) => {
    authenticateToken(req, res, () => {
        if (req.user) {
            next(); // Proceed if the user is authenticated
        } else {
            res.sendStatus(401); // Unauthorized if not authenticated
        }
    });
};

module.exports = {
    authenticateToken,
    authenticateAdmin,
    authenticateUser
};
..........................................................

const express = require('express');
const otpGenerateMail = require('./emailService');

const app = express();
app.use(express.json());

app.post('/sendEmail', async (req, res) => {
    const { to } = req.body;

    if (!to) {
        return res.status(400).json({ msg: 'Please provide the recipient email address.' });
    }
    const otp = Math.floor(1000 + Math.random() * 9000);

    try {
        await otpGenerateMail(to, otp);
        res.status(200).json({ msg: 'Email sent successfully', otp });
    } catch (error) {
        res.status(500).json({ msg: error.message });
    }

});

app.listen(3000, () => {
    console.log('Server listening on port 3000');
});
const nodemailer = require('nodemailer');

const transporter = nodemailer.createTransport({
    host: 'smtp.ethereal.email',
    port: 587,
    auth: {
        user: 'fritz27@ethereal.email',
        pass: 'FHvGpj7U3Y7kG12NAh',
    },
});


const sendEmail = async (to, subject, html) => {
    try {
        await transporter.sendMail({
            from: 'fritz27@ethereal.email',
            to,
            subject,
            html,
        });
        console.log('Email sent successfully');
    } catch (error) {
        console.error('Error sending email:', error);
        throw new Error('Failed to send email');
    }
};


const otpGenerateMail = async (to, otp) => {

    const subject = "Verify Email - OTP";
    const htmlContent = `
    <html>
      <body>
        <h2>Your OTP Code</h2>
        <p>Hello,</p>
        <p>We received a request to verify your email address. Your OTP code is:</p>
        <h1 style="font-size: 2em; color: #4CAF50;">${otp}</h1>
        <p>If you did not request this code, please ignore this email.</p>
        <p>Best regards,<br>Your Company Name</p>
      </body>
    </html>
  `;

    try {
        await sendEmail(to, subject, htmlContent);
    } catch (error) {
        throw new Error('Failed to send email');
    }

}

module.exports = otpGenerateMail;
